  
  
literal
  : <catch literal>
  | <thread literal>
  | <range literal>
  | <numeric literal>
  | <float literal>
  | <regexp literal>
  | <string literal>
  | <array literal>
  | <map literal>
  | <function literal>
  ;

array literal
  : '[' <expression list>? ']'
  ;

catch literal
  : <specific catch>
  | <general catch>
  ;

specific catch
  : 'catch' <expression> <block>
  ;
  
general catch
  : 'catch' <block>
  ;
  
thread literal
  : 'do' <block> 
  ;
  
map literal
  : '{' <map list>? '}'
  ;
  
map list
  : <map pair> ( ',' <map pair> )*
  ;
  
map pair
  : <optional argument>
  | <key value pair>
  ;
  
key value pair
  : <expression> '->' <expression>
  ;
  
range literal
  : <range with step>
  | <range without step>
  ;
  
range with step
  : <range without step> '\' <numeric literal>
  ;
  
range without step
  : <range value> <range inclusion> <range value>
  ;
  
range value
  : <numeric literal>
  | <string literal>
  ;
  
range inclusion
  : '...'
  | '..'
  ;
  
numeric literal
  : <float literal>
  | <integer literal>
  ;
  
integer literal
  : <hexadecimal integer>
  | <octal integer>
  | <binary integer>
  | <decimal integer>
  ;
  
hexadecimal integer
  : '0' ('x' | 'X') ([0-9]|[a-f]|[A-F])  ( "'"? [0-9]|[a-f]|[A-F])*
  ;
  
octal integer
  : '0' ('o' | 'O') ([0-7])  ( "'"? [0-7])*
  ;  
  
binary integer
  : '0' ('b' | 'b') ([0-1])  ( "'"? [0-1])*
  ;    
  
decimal integer
  : [0-9] ( "'"? [0-9] )+
  ;  
  
function literal
  : '(' <argument definition>? ')' <block>
  ;
  
argument definition
  : <argument> (',' <argument>)* 
  ;
  
argument
  : <optional argument>
  | <identifier>
  ;
  
block
  : <line block>
  | <multiline block>
  ;
  
line block
  : '->' <sentence>
  ;
  
multiline block
  : '{' <sentence list>? '}'
  ;
  
sentence list
  : <sentence> (<sentence separator>+ <sentence>)*
  ;
  
sentence separator
  : <newline>
  | ';'
  ;
  
float literal
  : <exponential float>
  | <required float>
  ;

regexp literal
  : "/" (<interpolated string>|<string escape>|<regexp character>)* "/" <regexp flag>*
  ;
  
regexp character
  = any character except newline or '/'
  ;
  
regexp flag
  = ([a-z] | [A-Z])
  ;
  
exponential float
  : <optional float> ( 'e' | 'E' ) '-'? <optional float>
  ;

optional float
  : <required float>
  | <decimal integer>
  ;
  
required float
  : <decimal integer> '.' <decimal integer>
  ;
  

  
string literal
  : <single quoted string>
  | <double quoted string>
  ;

single quoted string
  : "'" (<string escape> | <string character>)* "'" 
  ;
  
double quoted string
  : '"'  (<interpolated string>|<string escape>|<string character>)* '"' 
  ;
  
string escape
  : <unicode escape>
  | <ascii escape>
  | <string escaped character>
  ;
  
unicode escape
  : '\' ('u' | U) <hex digit> < hex digit> <hex digit> < hex digit>
  ;
  
ascii escape
  : '\' <hex digit> < hex digit>
  ;
  
string escaped character
  : '\' <string character> # n, r, t, v, f have special values
  ;
  
string character
  : any character except newline, the string quote or carrier return
  ;
  
interpolated string
  : '#' '{' <expression> '}'
  ;
  
expression list
  : <expression> ( ',' <expression> )*
  ;  
  
expression
  : <boolean expression> '?' <boolean expression> ':' <expression>
  ;
  
boolean expression
  : <and expression> ('||' <and expression>)*
  ;
  
and expression
  : <compare expression> ('&&' <compare expression>)*
  ;
  
compare expression
  : <add expression> <compare operator> <add expression>
  | <add expression>
  ;
  
compare operator
  : '<=>'
  | '<='
  | '>='
  | '=='
  | '=~'
  | '!~'
  | '!='
  | '<'
  | '>'  
  ;
  
add expression
  : <term> (<add operator> <term>)*
  ;
  
add operator
  : '+'
  | '-'
  | '|'
  | '^'
  ;
  
term
  : <factor> (<term operator> <factor>)*
  
term operator
  : '<<'
  | '>>'
  | '%%'
  | '*'
  | '%'
  | '/'
  | '&'
  ;
  
factor
  : <unary expression> ( '**' <unary expression> )*
  ;
  
unary expression
  : <unary operator> <unary expression>
  | <method call>
  ;
  
unary operator
  : '++'
  | '--'
  | '+'
  | '-'
  | '!'
  | '~'
  ;
  
method call
  : <method receiver> <method caller>*
  ;
  
method receiver
  : <literal>
  | <identifier>
  | <sub expression>
  ;
  
sub expression
  : '(' expression ')'
  ;
  
method caller
  : <id caller>
  | <invoke caller>
  | <subscript caller>
  ;
  
id caller
  : '.' <identifier>
  ;
  
invoke caller
  : <sub expression>
  | <argument call>
  ;
  
argument call
  : '(' <argument call list> ')'
  ;
  
argument call list
  : <optional argument> (',' <optional argument>)*
  ;
  
optional argument
  : <identifier> ':' <expression>
  ;
  
subscript caller
  : '[' <expression list> ']'
  ;
  
identifier
  : ([A-Z] | [a-z_]) ([A-Z] | [a-z] | [0-9] | '_')*
  ;
  
assignment
  : <chained assignment>
  | <multiple assignment>
  ;
  
chained assignment
  : <expression> (':' <expression>)*
  ;
  
multiple assignment
  : <expression list> ':' <expression list>
  ;
  
<sentence>
  : <return sentence>
  | <break sentence>
  | <continue sentence>
  | <if sentence>
  | <while sentence>
  | <for sentence>
  | <case sentence>
  | <throw sentence>
  | <assignment>
  | <expression>
  ;
  
return sentence
  : <expression return>
  | <nil return>
  ;
  
expression return
  : 'return' <expression>
  ;
  
nil return
  : 'return'
  ;
  
break sentence
  : 'break'
  ;
  
continue sentence
  : 'continue'
  ;
  
if sentence
  : <if else>
  | <simple if>
  ;
  
if else
  : <simple if> 'else' <block>
  ;
  
simple if
  : 'if' <expression> <block>
  ;
  
while sentence
  : 'while' <expression> <block> 
  ;
  
for sentence
  : 'for' <identifier> 'in' <expression> <block> 
  ;
  
case sentence
  : 'case' <expression> <case block>
  ;
  
case block
  : '{' <case comparison>* <else case>? '}'
  ;
  
case comparison
  : 'when' <expression> <sentence separator> <sentence list>?
  ;
  
else case
  : 'else' <sentence separator> <sentence list>
  ;
  
throw sentence
  : 'throw' <expression>
  ;